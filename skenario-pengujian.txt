Unit testing ViewModel:
1)  Kelas AddStoryViewModelTest:
    a.  Ketika berhasil menambah data Stories.
        - Memastikan data tidak null.
        - Memastikan mengembalikan Result.Success.
        - Memastikan data berhasil ditambahkan.

    b.  Ketika gagal menambah data Stories.
        - Memastikan mengembalikan Result.Error.

    c.  Ketika setFile data getFile sukses
        - Memastikan data tidak null.
        - Memastikan mengembalikan File.
        - Memastikan data file sesuai dengan yang diharapkan.

    d.  Ketika setLocation data getLocation sukses
        - Memastikan data tidak null.
        - Memastikan mengembalikan LatLng.
        - Memastikan data lokasi sesuai dengan yang diharapkan.

    e.  Ketika setToken sesi pengguna
        - Memastikan data tidak null.

2)  Kelas MapsViewModelTest:
    a.  Ketika berhasil memuat data Stories dengan kriteria lokasi.
        - Memastikan data tidak null.
        - Memastikan mengembalikan Result.Success.
        - Memastikan jumlah data sesuai dengan yang diharapkan.
        - Memastikan data hasil sesuai dengan yang diharapkan.

    b.  Ketika gagal memuat data Stories dengan kriteria lokasi.
        - Memastikan mengembalikan Result.Error.

    c.  Ketika setToken sesi pengguna
        - Memastikan data tidak null.

3)  Kelas LoginViewModelTest:
    a. Ketika berhasil login data pengguna.
      - Memastikan data user tidak null.
      - Memastikan mengembalikan Result.Success.
      - Memastikan data status berhasil login.
      - Memastikan data id user sesuai dengan yang diinginkan.

    b.  Ketika gagal login data pengguna.
        - Memastikan mengembalikan Result.Error.

    c.  Ketika loginSession
        - Memastikan data tidak null.

4)  Kelas StoriesViewModelTest:
    a.  Ketika berhasil memuat data Stories.
        - Memastikan data tidak null.
        - Memastikan jumlah data sesuai dengan yang diharapkan.
        - Memastikan data hasil sesuai dengan yang diharapkan.

    b.  Ketika getUser sesi data pengguna
        - Memastikan data tidak null.
        - Memastikan data hasil sesuai dengan yang diharapkan.

    c.  Ketika setToken sesi pengguna
        - Memastikan data token tidak null.

5)  Kelas RegisterViewModelTest:
    a.  Ketika berhasil registrasi data pengguna.
        - Memastikan data tidak null.
        - Memastikan mengembalikan Result.Success.
        - Memastikan data berhasil ditambahkan.
        - Memastikan data id user sesuai dengan yang diinginkan.

    b.  Ketika gagal registrasi data pengguna.
        - Memastikan mengembalikan Result.Error.

    c.  Ketika loginSession
        - Memastikan data tidak null.

6)  Kelas SettingsViewModelTest:
    a.  Ketika saveTheme sesi pengguna
        - Memastikan data boolean tema tidak null.

    b.  Ketika getTheme tema aplikasi.
        - Memastikan data tidak null.
        - Memastikan mengembalikan Boolean.
        - Memastikan data hasil sesuai dengan yang diharapkan.

    b.  Ketika logout
        - Memastikan data tidak null.

    c.  Ketika deleteStories
        - Memastikan data tidak null.

7)  Kelas SplashScreenViewModelTest:
    a.  Ketika getUser sesi data pengguna
        - Memastikan data tidak null.
        - Memastikan data hasil sesuai dengan yang diharapkan.

    b.  Ketika getTheme tema aplikasi.
        - Memastikan data tidak null.
        - Memastikan mengembalikan Boolean.
        - Memastikan data hasil sesuai dengan yang diharapkan.

Unit testing Repository:
1)  Kelas LoginRepositoryTest:
    Ketika berhasil login data pengguna.
    - Memastikan data user tidak null.
    - Memastikan data status berhasil login.
    - Memastikan data id user sesuai dengan yang diinginkan.

2)  Kelas RegisterRepositoryTest:
    Ketika berhasil registrasi data pengguna.
    - Memastikan data registrasi tidak null.
    - Memastikan data berhasil diregistrasi.

3)  Kelas StoriesRepositoryTest:
    Ketika getAllStories data sesuai.
    - Memastikan data stories tidak null.
    - Memastikan jumlah data sesuai dengan yang duharapkan.
    - Memastikan data hasil sesuai dengan yang diharapkan.

4)  Kelas WidgetRepositoryTest:
    Ketika getWidgetStory data sesuai.
    - Memastikan data stories tidak null.
    - Memastikan jumlah data sesuai dengan yang duharapkan.
    - Memastikan data hasil sesuai dengan yang diharapkan.

Integration test:
1)  Kelas StoriesFragmentTest
    a.  Ketika berhasil menampilkan data stories di Stories Fragment
        - RecyclerView tampil.
        - Data yang ditampilkan sesuai.
        - Memastikan data menuju ke data yang diinginkan.

    b.  Ketika gagal menampilkan data stories di Stories Fragment
        - RecyclerView tampil.
        - Pesan error yang ditampilkan sesuai.

End-to-end test:
1)  Kelas MainActivityTest
    a.  Menampilkan daftar stories
        - Memastikan RecyclerView untuk data item story telah ditampilkan.

    b.  Menampilkan detail story
        - Memastikan RecyclerView untuk data item story telah ditampilkan.
        - Memastikan menuju ke halaman DetailsStoryActivity.
        - Memastikan halaman detail dapat menampilkan imageView.

    c.  Menampilkan map lokasi stories
        - Memastikan menuju ke halaman MapsActivity.
        - Memastikan halaman detail dapat menampilkan map.
        - Memastikan toggle ubah tema map pada halaman map telah tampil.
        - Memastikan toggle ubah tema map pada halaman map ditekan.

    d.  Mengunggah Story
        - Memastikan menuju ke halaman AddStoryActivity.
        - Memastikan halaman unggah story menampilkan imageView.
        - Memastikan halaman unggah story menampilkan button untuk mengunggah.

    e.  Mengatur tema aplikasi
        - Memastikan menuju ke halaman SettingsActivity.
        - Memastikan halaman setting menampilkan judul pengaturan.
        - Memastikan halaman swich ubah tema telah tampil.
        - Memastikan swich ubah tema telah diswipeDown.

Room database test:
1)  Kelas StoriesDaoTest
    a.  Ketika menyimpan data story
        - Sama dengan data ketika getWidgetStory.

    b.  Ketika menghapus semua data story
        - Data getWidgetStory kosong.